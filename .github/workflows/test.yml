name: test

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
##########################################################################################
## Tests
##########################################################################################
  test:
    name: Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release, Debug]
        copiler_suite: [msvc, llvm, gnu]
        backend: [epoll, kqueue, iocp, iouring]
        exclude:
          - os: windows-latest
            copiler_suite: gnu
          - os: windows-latest
            copiler_suite: llvm
          - os: windows-latest
            backend: epoll
          - os: windows-latest
            backend: kqueue
          - os: windows-latest
            backend: iouring

          - os: ubuntu-latest
            copiler_suite: msvc
          - os: ubuntu-latest
            backend: kqueue
          - os: ubuntu-latest
            backend: iocp

          - os: macos-latest
            copiler_suite: msvc
          - os: macos-latest
            copiler_suite: gnu
          - os: macos-latest
            backend: epoll
          - os: macos-latest
            backend: iocp
          - os: macos-latest
            backend: iouring

    steps:
    - uses: actions/checkout@v3

    - name: Set strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

        if [ "$RUNNER_OS" == "Windows" ]; then
          echo "test-dir=${{ github.workspace }}/build/test/${{ matrix.build_type }}" >> "$GITHUB_OUTPUT"
          echo "test-exe=test.exe" >> "$GITHUB_OUTPUT"
        else
          echo "test-dir=${{ github.workspace }}/build/test" >> "$GITHUB_OUTPUT"
          echo "test-exe=test" >> "$GITHUB_OUTPUT"
        fi

        if [ "${{ matrix.backend }}" == "iouring" ]; then
          echo "backend-cmake=-DMG_AIO_USE_IOURING=1" >> "$GITHUB_OUTPUT"
        else
          echo "backend-cmake=" >> "$GITHUB_OUTPUT"
        fi

        if [ "${{ matrix.copiler_suite }}" == "msvc" ]; then
          echo "compiler_c=cl" >> "$GITHUB_OUTPUT"
          echo "compiler_cxx=cl" >> "$GITHUB_OUTPUT"
        elif [ "${{ matrix.copiler_suite }}" == "llvm" ]; then
          echo "compiler_c=clang" >> "$GITHUB_OUTPUT"
          echo "compiler_cxx=clang++" >> "$GITHUB_OUTPUT"
        else
          echo "compiler_c=gcc" >> "$GITHUB_OUTPUT"
          echo "compiler_cxx=g++" >> "$GITHUB_OUTPUT"
        fi

    - name: Install libs
      shell: bash
      run: |
        if [ "${{ matrix.backend }}" == "iouring" ]; then
          sudo apt install liburing-dev
        fi

    - name: Configure CMake
      shell: bash
      run: |
        export CC="${{ steps.strings.outputs.compiler_c }}"
        export CXX="${{ steps.strings.outputs.compiler_cxx }}"
        if [ "$RUNNER_OS" == "macOS" ]; then
          export CC=$(brew --prefix llvm@15)/bin/$CC
          export CXX=$(brew --prefix llvm@15)/bin/$CXX
        fi
        cmake -B "${{ steps.strings.outputs.build-output-dir }}" \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          ${{ steps.strings.outputs.backend-cmake }} \
          -S "${{ github.workspace }}"

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Prepare the runtime
      shell: bash
      run: |
        if [ "$RUNNER_OS" == "macOS" ]; then
          sudo sysctl -w kern.ipc.somaxconn=30000
        fi

    - name: Test
      working-directory: ${{ steps.strings.outputs.test-dir }}
      run: ./${{ steps.strings.outputs.test-exe }}
      timeout-minutes: 30

##########################################################################################
## Examples
##########################################################################################

  examples:
    name: Examples
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release]
        copiler_suite: [msvc, llvm, gnu]
        exclude:
          - os: windows-latest
            copiler_suite: gnu
          - os: windows-latest
            copiler_suite: llvm

          - os: ubuntu-latest
            copiler_suite: msvc

          - os: macos-latest
            copiler_suite: msvc
          - os: macos-latest
            copiler_suite: gnu

    steps:
    - uses: actions/checkout@v3

    - name: Set strings
      id: strings
      shell: bash
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          echo "exe-subdir=${{ matrix.build_type }}/" >> "$GITHUB_OUTPUT"
          echo "exe-suffix=.exe" >> "$GITHUB_OUTPUT"
        fi

        if [ "${{ matrix.copiler_suite }}" == "msvc" ]; then
          echo "compiler_c=cl" >> "$GITHUB_OUTPUT"
          echo "compiler_cxx=cl" >> "$GITHUB_OUTPUT"
        elif [ "${{ matrix.copiler_suite }}" == "llvm" ]; then
          echo "compiler_c=clang" >> "$GITHUB_OUTPUT"
          echo "compiler_cxx=clang++" >> "$GITHUB_OUTPUT"
        else
          echo "compiler_c=gcc" >> "$GITHUB_OUTPUT"
          echo "compiler_cxx=g++" >> "$GITHUB_OUTPUT"
        fi

    - name: Configure CMake
      working-directory: ${{ github.workspace }}/examples
      shell: bash
      run: |
        export CC="${{ steps.strings.outputs.compiler_c }}"
        export CXX="${{ steps.strings.outputs.compiler_cxx }}"
        if [ "$RUNNER_OS" == "macOS" ]; then
          export CC=$(brew --prefix llvm@15)/bin/$CC
          export CXX=$(brew --prefix llvm@15)/bin/$CXX
        fi
        cmake -B "${{ github.workspace }}/examples/build" \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -S "${{ github.workspace }}/examples"

    - name: Build
      shell: bash
      run: |
        cmake --build "${{ github.workspace }}/examples/build" \
          --config ${{ matrix.build_type }}

    - name: Run
      working-directory: ${{ github.workspace }}/examples/build
      timeout-minutes: 5
      shell: bash
      run: |
        invoke_exe() {
          local arg="$1"
          if [ "$RUNNER_OS" = "Windows" ]; then
              local exe_path="./$arg/${{ matrix.build_type }}/$arg.exe"
          else
              local exe_path="./$arg/$arg"
          fi
          if [ -x "$exe_path" ]; then
              "$exe_path"
          else
              echo "Error: Executable not found or not executable at $exe_path"
              return 1
          fi
        }
        invoke_exe scheduler_01_simple_task
        invoke_exe scheduler_02_coroutine_task
        invoke_exe scheduler_03_multistep_task
        invoke_exe scheduler_04_interacting_tasks
        invoke_exe iocore_01_tcp_hello
        invoke_exe iocore_02_ssl_hello
        invoke_exe iocore_03_pipeline
        invoke_exe iocore_04_tcp_periodic
